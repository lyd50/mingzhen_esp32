#include "EdpKit.h"
#include "EEPROM.h"
#include <Arduino.h>
#include <WiFi.h>
#include <WiFiUdp.h>
#include <esp_task_wdt.h>
#include <HttpClient.h>
#include <ArduinoJson.h>

#include <Update.h>
bool tiaoshikg = true;
/* --------------------------------------wifi--------------------------------------*/
const char *ssid = "lydwifi";
const char *password = "19711128";

byte wifi_disconnect_count = 0;
WiFiUDP udp;
/* --------------------------------------udp---------------------------------------*/
#define BUFFER_LENGTH 64
char receivedString[BUFFER_LENGTH];
String state = "";
unsigned long receive_time = 0;
unsigned long send_time = 0;
int chongqi = 32;
byte edp_disconnect_count = 0;
/* ---------------------------------------edp-----------------------------------------*/
bool wifi_connected = false;

bool chxu_update = false;
const char *edp_server = "jjfaedp.hedevice.com";
unsigned int edp_port = 876;
bool edpConnected = false;
const char *apikey = "DtqP1ueccp3al7g9ey86QPx4mmU=", *device_id = "507317604";
unsigned char edp_buffer[200]; //???????
unsigned int edp_buffer_index=0;

unsigned long xintiao_jiange = 0; //???????????????????????
WiFiClient edp_client;			  //

unsigned long hb_send, hb_received, hb_confirm_jiange;
bool hb_confirm = false;
/* --------------------重启----------------------------------*/
bool send_reset = false;
/*-------------------------------ota更新--------------------------------------*/
WiFiClient update_client;
const char *edp_host = "api.heclouds.com";
HttpClient http_client = HttpClient(update_client, edp_host, 80);
//unsigned long update_jiange=0;

const char *update_host = "lyd50.vicp.io";
String bin = ""; // bin file name with a slash in front.
int contentLength = 0;
bool isValidContentType = false;
unsigned long version = 0, version_latest = 0;
DynamicJsonDocument doc(800);
//int status = WL_IDLE_STATUS;
String response;
int statusCode = 0;
String update_message[10];
bool to_send_update_message = false;

void tiaoshi(String pingmuxianshi)
{

	if (tiaoshikg == true)
	{

		Serial.println(pingmuxianshi);
	}
}

void rcvDebug(unsigned char *rcv, int len)
{
	int i;

	Serial.print("edp接收的数�??");
	Serial.println(len, DEC);
	for (i = 0; i < len; i++)
	{
		Serial.print(rcv[i], 10);
		Serial.print(" ");
	}
	Serial.println("");
}
void edp_first_connect()
{
	if (WiFi.status() == WL_CONNECTED) //WiFi连接成功
	{
		if (wifi_client_connect() == true) //WiFi连接到网站成�??
		{

			EdpPacket *send_pkg = PacketConnect1(device_id, apikey);
			while (edp_client.available())
			{
				edp_client.read();
			}
			edp_client.write(send_pkg->_data, send_pkg->_write_pos);

			DeleteBuffer(&send_pkg);
		}
	}
}
void edp_packet_send(unsigned char *buff, unsigned int size)
{ //发送前清空客户端数据
	while (edp_client.available())
	{
		edp_client.read();
	}
	
	if (edpConnected)
	{
		edp_client.write(buff, size);
	}
	else{tiaoshi("没有连接到物联网平台");}
}
void edp_heartbeat()
{
	//ESP.wdtFeed();
	if (WiFi.status() == WL_CONNECTED) //WiFi连接状态
	{
		if (wifi_client_connect() == true) //WiFi连接到网站成功
		{
			EdpPacket *ping_pkg = PacketPing(); //请求是：192 0  0xC0 0
			edp_packet_send(ping_pkg->_data, ping_pkg->_write_pos);
			//edp_client.write(ping_pkg->_data, ping_pkg->_write_pos);
			DeleteBuffer(&ping_pkg);

			//if (tiaoshikg == true)
			//{
			//	rcvDebug(edp.GetData(), edp.GetWritepos());
			//}
		}
		else
		{
			edpConnected = false; //
			edp_first_connect();  //
		}
	}
	else
	{
		edpConnected = false;
	}
}

bool wifi_client_connect() //检查到物联网服务器连接状�?
{
	if (!edp_client.connected())
	{
		if (WiFi.status() == WL_CONNECTED)
		{
			edp_client.connect(edp_server, edp_port);
			Serial.print("连接到：");
			Serial.println((String)edp_server);
			delay(20);
		}

		if (edp_client.connected())
		{ // ld.print("edp1succ",0);//04 edp服务�?? 连接  01:成功
			return true;
			//xianshiping_sendorder2("zhuangtai", "连接到物联网服务�?�??�常");
			tiaoshi("连接到物联网主机正常");
		}
		else
		{ //ld.print("edp1fail",0);//04 edp服务�?? 连接  01:成功
			//xianshiping_sendorder2("zhuangtai", "连接到物联网服务器失�??");
			tiaoshi("连接到物联网主机失败");
			return false;
		}
	}
	else //连接状�?
	{
		tiaoshi("连接到物联网主机正常");
		return true;
	}
}
void  add_update_message(String message)
{	for (int i = 0; i < 10; i++)
	{
		if (update_message[i] == "")
		{
			update_message[i] = message;
			break;
		}
	}
}

void send_update_message()
{
	for (int i = 0; i < 10; i++)
	{
		if (update_message[i] != "")
		{
			edp_upload_string("update", update_message[i].c_str());
			update_message[i] = "";
			tiaoshi("发送更新信息：" + (String)(i + 1) + "次");
		}
		else
		{
			tiaoshi("发送信息为空");
			break;
		}
	}
}

void ota()
{ // OTA Logic
	esp_task_wdt_init(360, false);
	edp_client.stop();//停止数据wifi客户端

	Serial.println("Connecting to: " + String(update_host));
	// Connect to lyd50.vicp.io
	if (update_client.connect(update_host, 80))
	{
		update_client.setTimeout(300);
		// Connection Succeed.
		// Fecthing the bin
		bin = String(version_latest) + ".bin";
		Serial.println("Fetching Bin: " + bin);

		while (update_client.available())
		{
			update_client.read();
		} //清空

		// Get the contents of the bin file
		update_client.print(String("GET /watchdog/") + bin + " HTTP/1.1\r\n" +
							"Host: lyd50.vicp.io" + "\r\n" +
							"cache-control: no-cache\r\n\r\n");

		// Check what is being sent
		//    Serial.print(String("GET ") + bin + " HTTP/1.1\r\n" +
		//                 "Host: " + host + "\r\n" +
		//                 "Cache-Control: no-cache\r\n" +
		//                 "Connection: close\r\n\r\n");

		unsigned long timeout = millis();
		while (update_client.available() == 0)
		{
			if (millis() - timeout > 5000)
			{
				Serial.println("Client Timeout !");
				update_client.stop();
				return;
			}
		}

		while (update_client.available())
		{
			// read line till /n
			String line = update_client.readStringUntil('\n');
			// remove space, to check if the line is end of headers
			line.trim();
			//Serial.println(line);
			// if the the line is empty,// this is end of headers// break the while and feed the
			// remaining `client` to the// Update.writeStream();
			if (!line.length()) //头部结束
			{
				while (update_client.peek() != 0xE9) //去掉非bin数据
				{
					update_client.read();
				}

				break; // and get the OTA started
			}
			if (line.startsWith("Content-Length: "))
			{
				contentLength = atoi((getHeaderValue(line, "Content-Length: ")).c_str());
				Serial.println("Got " + String(contentLength) + " bytes from server");
			}

			// Check if the HTTP Response is 200
			// else break and Exit Update
			if (line.startsWith("HTTP/1.1"))
			{
				if (line.indexOf("200") < 0)
				{
					Serial.println("Got a non 200 status code from server. Exiting OTA Update.");
					return;
				}
			}

			if (line.startsWith("Content-Type: "))
			{
				// Utility to extract header value from headers
				String s = "Content-Type: ";
				String contentType = line.substring(strlen(s.c_str()));
				Serial.println("Got " + contentType + " payload.");
				if (contentType == "application/octet-stream")
				{
					isValidContentType = true;
				}
			}
		}

		/*for (int i = 0; i < 20; i++)
		{

			edp_buffer[i] = update_client.read();
		}
		rcvDebug(edp_buffer, 20);*/

		// check contentLength and content type
		// Check what is the contentLength and if content type is `application/octet-stream`
		Serial.println("contentLength : " + String(contentLength) + ", isValidContentType : " + String(isValidContentType));

		// check contentLength and content type
		if (contentLength && isValidContentType)
		{
			// Check if there is enough to OTA Update
			bool canBegin = Update.begin(contentLength);

			// If yes, begin
			if (canBegin)
			{
				Serial.println("Begin OTA. This may take 2 - 5 mins to complete. Things might be quite for a while.. Patience!");
				// No activity would appear on the Serial monitor
				// So be patient. This may take 2 - 5mins to complete
				size_t written = Update.writeStream(update_client);

				if (written == contentLength)
				{
					Serial.println("Written : " + String(written) + " successfully");
				}
				else
				{
					Serial.println("Written only : " + String(written) + "/" + String(contentLength) + ". Retry?");
					// retry??
					// execOTA();
				}

				if (Update.end())
				{
					Serial.println("OTA done!");
					if (Update.isFinished())
					{

						Serial.println("Update successfully completed. Rebooting.");
						version = version_latest;
						version_latest = 0;
						EEPROM.writeULong(80, version);
						if (EEPROM.commit())
						{
							tiaoshi("成功写入");
						}
						else
						{
							tiaoshi("写入失败");
						}
						ESP.restart();
					}
					else
					{
						Serial.println("Update not finished? Something went wrong!");
                        add_update_message("Update not finished? Something went wrong!") ;
					}
				}
				else
				{
					Serial.println("Error Occurred. Error #: " + String(Update.getError()));
                     add_update_message("Error Occurred. Error #: " + String(Update.getError()));
				}
			}
			else
			{
				// not enough space to begin OTA
				// Understand the partitions and
				// space availability
				Serial.println("Not enough space to begin OTA");
				add_update_message("Not enough space to begin OTA");
				//client.flush();
			}
		}
	}
	else
	{
		// Connect to S3 failed	// May be try?	// Probably a choppy network?
		Serial.println("Connection to " + String(update_host) + " failed. Please check your setup");
        add_update_message("Connection to " + String(update_host) + " failed. Please check your setup") ;   
		
		}
}

void edp_command_parse() //解析物联网返回的数据
{
	char *cmdid;
	unsigned short cmdid_len;
	char *cmd_req;
	unsigned int cmd_req_len;
	char cmd_resp[] = "ok";
	unsigned int cmd_resp_len = 0;
	EdpPacket *order_pkg;
	while (edp_client.available())
	{
		edp_buffer[edp_buffer_index] = edp_client.read();
		edp_buffer_index++;
	}

	RecvBuffer *recv_buf = NewBuffer();
	WriteBytes(recv_buf, edp_buffer, edp_buffer_index);
	edp_buffer_index = 0;
	EdpPacket *pkg = GetEdpPacket(recv_buf);
	DeleteBuffer(&recv_buf);
	byte mtype = EdpPacketType(pkg);

	switch (mtype)
	{
	case CONNRESP:
		if (UnpackConnectResp(pkg) == 0)
		{
			edpConnected = true;
			tiaoshi("已经连接到物联网");
		}
		break;
	case PINGRESP:
		if (UnpackPingResp(pkg) == 0)
		{
			hb_received = millis(); //心跳成功信号接收时间
		}
		break;
	case CMDREQ://160打头
		tiaoshi("接收到命令");

		if (UnpackCmdReq(pkg, &cmdid, &cmdid_len, &cmd_req, &cmd_req_len) == 0)
		{
			Serial.println(cmdid);
			Serial.println(cmd_req);
			if (((String)cmd_req).startsWith("update") == true)
			{
				get_bin_version();
				if (version_latest > version)
				{
					
					tiaoshi("执行远程更新");
					
					ota();
					add_update_message("update failed");
					edp_first_connect();//重新连接物联网平台
					to_send_update_message=true;				

				}else
				{  
                    tiaoshi("已经是最新版本。");
					
					add_update_message("已经是最新版本");
					//send_update_message();
					to_send_update_message=true;	
				}
			}
		}
		cmd_resp_len = strlen(cmd_resp);
		order_pkg = PacketCmdResp(cmdid, cmdid_len, cmd_resp, cmd_resp_len);
		edp_packet_send(order_pkg->_data, order_pkg->_write_pos);
		DeleteBuffer(&order_pkg);

		free(cmdid);
		free(cmd_req);

		break;
	default:
		break;
	}
	DeleteBuffer(&pkg);
}

void edp_upload_int(const char *data_stream_id, int datapoint) //
{
	if (edpConnected == true)
	{
		EdpPacket *int_pkg = PacketSavedataInt(kTypeSimpleJsonWithoutTime, device_id, data_stream_id, datapoint, 0, 0);

		edp_packet_send(int_pkg->_data, int_pkg->_write_pos);
		DeleteBuffer(&int_pkg);
	}
}
void edp_upload_string(const char *data_stream_id, const char *datapoint)
{
	if (edpConnected == true)
	{
		EdpPacket *string_pkg = PacketSavedataString(kTypeSimpleJsonWithoutTime, device_id, data_stream_id, datapoint, 0, 0);

		edp_packet_send(string_pkg->_data, string_pkg->_write_pos);
		DeleteBuffer(&string_pkg);
	}
}

void get_bin_version()
{
	http_client.beginRequest();
	http_client.get("/devices/" + (String)device_id + "/datastreams/bin_version");
	http_client.sendHeader("api-key", apikey);
	http_client.endRequest();
	statusCode = http_client.responseStatusCode();
	response = http_client.responseBody();
	tiaoshi(response);
	tiaoshi("状态码：" + (String)statusCode);
	//tiaoshi(response);
	if (statusCode == 200)
	{
		DeserializationError error = deserializeJson(doc, response);
		if (error)
		{
			Serial.print(F("deserializeJson() failed: "));
			Serial.println(error.c_str());
			return;
		}

		JsonObject http_response = doc.as<JsonObject>();
		//JsonObject& data=http_response["data"] ;
		version_latest = http_response["data"]["current_value"].as<int>();
		tiaoshi((String)version_latest);
	String s="get latest version:"; s=s+(String)version_latest;
		edp_upload_string("update", s.c_str());
	}
}
// Utility to extract header value from headers
String getHeaderValue(String header, String headerName)
{
	return header.substring(strlen(headerName.c_str()));
}
void check_wifi() //锟斤拷锟斤拷锟斤拷锟斤拷锟斤�??
{
	if (WiFi.status() != WL_CONNECTED)
	{
		WiFi.begin(ssid, password);
		for (int i = 0; i < 25;) //一定延时
		{
			delay(500);
			Serial.print(".");
			i++;
		}
	}
	if ((WiFi.status() != WL_CONNECTED)) //重新连接�??
	{									 // ld.print("wifi fail",0);
		//xianshiping_sendorder2("zhuangtai", "wifi重新连接失败");

		wifi_disconnect_count++; //WiFi失败次数�??1

		tiaoshi("wifi重新连接失败");
	}
	else						   //WiFi重新连接成功
	{							   // ld.print("OIFI succ",0);//
		wifi_disconnect_count = 0; //WiFi失败次数�??�??
		tiaoshi("wifi连接正常");
		//xianshiping_sendorder2("zhuangtai", "wifi连接正常");
	}
	if (wifi_disconnect_count > 10)
	{
		ESP.restart();
	}
}
void sendok()
{
	IPAddress targetIp = IPAddress(192, 168, 2, 255); //?????
	int targetPort = 3333;
	udp.beginPacket(targetIp, targetPort);
	udp.print("ok");
	udp.endPacket();
	edp_upload_int("发送ok", 20);
	Serial.println("have sended ok");
	send_time = millis();
}

void eeprom_read()
{
	if (!EEPROM.begin(200))
	{
		Serial.println("failed to initialise EEPROM");
		delay(1000000);
	}	

	version = EEPROM.readULong(80); //bin版本					
}




void setup()
{
	esp_task_wdt_deinit();
	Serial.begin(9600);
	pinMode(chongqi, OUTPUT);
	digitalWrite(chongqi, LOW);
	// [START] BEGIN WIFI
	//WiFi.config(ip , gateway , subnet );
	WiFi.begin(ssid, password);

	if (WiFi.status() != WL_CONNECTED)
	{
		for (int i = 0; i < 20;)
		{
			delay(500);
			Serial.print(".");
			i++;
		}
	}
	if (WiFi.status() == WL_CONNECTED)
	{
		Serial.println("");
		Serial.print("Connected to ");
		Serial.println(ssid);
		Serial.print("IP address: ");
		Serial.println(WiFi.localIP());
		edp_first_connect();
		udp.begin(WiFi.localIP(), 7777); // BEGIN LISTENING ON UDP PORT 7777.
		sendok();						 //
	}

	eeprom_read();
}

void loop()
{
	if (send_reset == false) //运行一次,发送版本和启动信息
	{
		if (edpConnected == true)
		{   edp_upload_int("version",version);
			edp_upload_int("chongqi", 10);
			delay(1000);
			edp_upload_int("chongqi", 0);
			send_reset = true;
		}
	}
	/*---------------如果更新失败，向物联网平台发送失败信息-------------------*/
	if (to_send_update_message == true)
	{
		for (int i = 0; i < 10; i++)
		{
			if (update_message[i] != "")
			{
				edp_upload_string("update", update_message[i].c_str());
				update_message[i] = "";
				tiaoshi("发送更新信息：" + (String)(i + 1) + "次");
			}
			else
			{
				tiaoshi("发送信息为空");
				break;
			}
		}

		to_send_update_message = false;
	}

	/*------------------------------------wifi检查 到物联网服务器主机 定时心跳发出------------------------------------------*/

	if (millis() - xintiao_jiange > 180000)
	{
		xintiao_jiange = millis();

		check_wifi(); //wifi失联超过10次重�?�?
		
		wifi_client_connect();
		//delay(1500); //为了显示�?否连接到edp服务�?
		//tiaoshi("检�?WiFi�?否连接到物联网站");
		if (WiFi.status() == WL_CONNECTED && edp_client.connected() == true)
		{
			if (edp_disconnect_count > 1)
			{
				edp_first_connect();
			}
			else
			{
				edp_heartbeat();	//�?以确定edp�?否连接状�?
				hb_send = millis(); //心跳发送时�?
				hb_confirm = true;
				hb_confirm_jiange = millis();
			}
		}
	}

	/*------------------------------------edp心跳结果�?认，------------------------------------------------*/

	if (hb_confirm == true && millis() - hb_confirm_jiange > 10000) //发送心跳后10�?
	{
		if (hb_received - hb_send > 0)
		{
			edpConnected = true;

			//rcvDebug(edp_buffer, byte_count);
			edp_disconnect_count = 0;
			//edp_upload_string("heart beat", "received ok"); //
			tiaoshi("EDP心跳成功接收返回数据，物联网正常");
		}
		else
		{
			edpConnected = false;
			tiaoshi("物联网断网");
		}
		hb_confirm = false;
	}

	/*------------------------------------edp接收命令------------------------------------------------*/

	//没有wifi，没有连接服务器，不用进�??
	if (WiFi.status() == WL_CONNECTED && edp_client.connected() == true)
	{
		while (edp_client.available()) //有数�??
		{
			//tiaoshi("接收到edp数据");
			edp_command_parse(); //解析返回数据
		}
	}

	if (millis() - send_time > 25000)
	{
		sendok();
	}

	if (udp.parsePacket())
	{
		// Serial.println("found data");
		if (udp.available())
		{
			//Serial.println("available");
			while (udp.available())
			{
				state = udp.readString();
			}
			//Serial.println(state);
			if (state == "ok")
			{
				state = "";
				Serial.println("received ok");
				edp_upload_int("接收ok", 20);
				edp_upload_int("重启对方", 0);
				receive_time = millis();

				// [END] AN UDP PACKET WAS RECEIVED
			}
		}
	}

	if ((millis() - receive_time) > 60000)
	{
		digitalWrite(chongqi, HIGH);
		delay(4000);
		digitalWrite(chongqi, LOW);
		Serial.println("reset onetime");
		edp_upload_int("接收ok", 0);
		edp_upload_int("重启对方", 20);
		receive_time = millis(); //加上重启等待
	}
}
